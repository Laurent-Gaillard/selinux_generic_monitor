#######################################
## <summary>
##      The template creates all the objects usefull to an generic_mon derivative application.
## </summary>
## <desc>
##      <p>
##      The template contains the basic types and rules.
##      </p>
##      <p>
##      This template creates a domain, types, and
##      rules to be used by a monitoring application.
##      </p>
## </desc>
## <param name="domain subname">
##      <summary>
##      The subname to create generic_mon_$1_<subname>_t domain and its associated types.
##      </summary>
## </param>
#
template(`generic_mon_app_domain',`
        gen_require(`
                class dir { manage_dir_perms};
                class file { manage_file_perms };
                class lnk_file { manage_lnk_file_perms };
                class dir { manage_dir_perms };

                class chr_file getattr;

                type tty_device_t, user_devpts_t;
        ')

        type generic_mon_$1_port_t;
        corenet_port(generic_mon_$1_port_t);

        type generic_mon_$1_root_t;
        files_type(generic_mon_$1_root_t)

        type generic_mon_$1_file_t;
        files_type(generic_mon_$1_file_t)

        type generic_mon_$1_usr_t;
        files_type(generic_mon_$1_usr_t)

        type generic_mon_$1_conf_t;
        files_config_file(generic_mon_$1_conf_t)

        type generic_mon_$1_bin_t;
        files_type(generic_mon_$1_bin_t)

        type generic_mon_$1_lib_t;
        files_type(generic_mon_$1_lib_t)

        type generic_mon_$1_var_t;
        files_type(generic_mon_$1_var_t)

        type generic_mon_$1_var_run_t;
        files_pid_file(generic_mon_$1_var_run_t)

        type generic_mon_$1_log_t;
        logging_log_file(generic_mon_$1_log_t)

        type generic_mon_$1_tmp_t;
        files_tmp_file(generic_mon_$1_tmp_t)

        #################################################
        #This creates also the transition from initrc_domain to generic_mon_$1_t
        #################################################
        systemd_domain_template(generic_mon_$1)



        #################################################
        #Manage domain objects
        #################################################
        allow  generic_mon_$1_t  tty_device_t:chr_file         		getattr;
        allow  generic_mon_$1_t  user_devpts_t:chr_file        		getattr;
        allow  generic_mon_$1_t  generic_mon_$1_root_t:dir          list_dir_perms;
        allow  generic_mon_$1_t  generic_mon_$1_root_t:file         read_file_perms;
        allow  generic_mon_$1_t  generic_mon_$1_root_t:lnk_file     read_lnk_file_perms;
        allow  generic_mon_$1_t  generic_mon_$1_file_t:dir          search_dir_perms;
        allow  generic_mon_$1_t  generic_mon_$1_file_t:file         read_file_perms;
        allow  generic_mon_$1_t  generic_mon_$1_file_t:lnk_file     read_lnk_file_perms;
        allow  generic_mon_$1_t  generic_mon_$1_usr_t:dir           manage_dir_perms;
        allow  generic_mon_$1_t  generic_mon_$1_usr_t:file          manage_file_perms;
        allow  generic_mon_$1_t  generic_mon_$1_usr_t:lnk_file      manage_lnk_file_perms;
        allow  generic_mon_$1_t  generic_mon_$1_bin_t:dir           list_dir_perms;
        allow  generic_mon_$1_t  generic_mon_$1_bin_t:file          exec_file_perms;
        allow  generic_mon_$1_t  generic_mon_$1_bin_t:lnk_file      read_lnk_file_perms;
        allow  generic_mon_$1_t  generic_mon_$1_lib_t:dir           search_dir_perms;
        allow  generic_mon_$1_t  generic_mon_$1_lib_t:file          read_file_perms;
        allow  generic_mon_$1_t  generic_mon_$1_lib_t:lnk_file      read_lnk_file_perms;
        allow  generic_mon_$1_t  generic_mon_$1_var_t:dir           manage_dir_perms;
        allow  generic_mon_$1_t  generic_mon_$1_var_t:file          manage_file_perms;
        allow  generic_mon_$1_t  generic_mon_$1_var_t:lnk_file      manage_lnk_file_perms;
        allow  generic_mon_$1_t  generic_mon_$1_var_run_t:dir       manage_dir_perms;
        allow  generic_mon_$1_t  generic_mon_$1_var_run_t:file      manage_file_perms;
        allow  generic_mon_$1_t  generic_mon_$1_var_run_t:lnk_file  manage_lnk_file_perms;
        allow  generic_mon_$1_t  generic_mon_$1_log_t:dir           manage_dir_perms;
        allow  generic_mon_$1_t  generic_mon_$1_log_t:file          {create_file_perms  append_file_perms  read_file_perms };
        allow  generic_mon_$1_t  generic_mon_$1_tmp_t:dir           manage_dir_perms;
        allow  generic_mon_$1_t  generic_mon_$1_tmp_t:file          manage_file_perms;
        allow  generic_mon_$1_t  generic_mon_$1_tmp_t:lnk_file      manage_lnk_file_perms;

        #################################################
        #Access to other objetcts
        #################################################
        corecmd_exec_shell(generic_mon_$1_t)
        corecmd_exec_bin(generic_mon_$1_t)

        files_read_var_files(generic_mon_$1_t)
        files_read_var_symlinks(generic_mon_$1_t)
        files_read_var_lib_files(generic_mon_$1_t)
        files_read_config_files(generic_mon_$1_t)
        files_exec_usr_files(generic_mon_$1_t)
        files_search_locks(generic_mon_$1_t)

')


########################################
## <summary>
##      Authorize to create a listening socket.
## </summary>
## <param name="domain">
##      <summary>
##      The domain to be authorized to create socket.
##      </summary>
## </param>
#
interface(`generic_mon_listening_socket',`
        gen_require(`
                type generic_mon_$1_t , generic_mon_$1_port_t;
                type net_conf_t;
                type node_t;
                type sysctl_net_t;

                class capability { net_admin };
                class tcp_socket { create_stream_socket_perms name_bind node_bind };
                class udp_socket { create_stream_socket_perms name_bind node_bind };
                class unix_dgram_socket { create_stream_socket_perms };
                class unix_stream_socket { create_stream_socket_perms };
                class file { getattr open read };
                class dir { search };
        ')

                allow generic_mon_$1_t self:capability { net_admin };
                allow generic_mon_$1_t self:tcp_socket { create_stream_socket_perms };
                allow generic_mon_$1_t self:udp_socket { create_stream_socket_perms };
                allow generic_mon_$1_t generic_mon_$1_port_t:tcp_socket { name_bind };
                allow generic_mon_$1_t generic_mon_$1_port_t:udp_socket { name_bind };

                allow generic_mon_$1_t net_conf_t:file { getattr open read };

                allow generic_mon_$1_t node_t:tcp_socket { node_bind };
                allow generic_mon_$1_t node_t:udp_socket { node_bind };
                allow generic_mon_$1_t sysctl_net_t:dir { search };
                allow generic_mon_$1_t sysctl_net_t:file { getattr open read };
')

########################################
## <summary>
##      Authorize to connect to socket.
## </summary>
## <param name="domain subname">
##      <summary>
##      The domain to be authorized to connect to socket.
##      </summary>
## </param>
#
interface(`generic_mon_connecting_socket',`
        gen_require(`
                type generic_mon_$1_t , generic_mon_$1_port_t;

                class tcp_socket { create_socket_perms name_connect node_bind };
                class udp_socket { create_socket_perms node_bind };
                class unix_dgram_socket { create_socket_perms };
                class unix_stream_socket { create_socket_perms };
        ')

                allow generic_mon_$1_t self:tcp_socket { create_socket_perms };
                allow generic_mon_$1_t self:udp_socket { create_socket_perms };
                allow generic_mon_$1_t self:unix_dgram_socket { create_socket_perms };
                allow generic_mon_$1_t self:unix_stream_socket { create_socket_perms };
                allow generic_mon_$1_t node_t:tcp_socket { node_bind };
                allow generic_mon_$1_t node_t:udp_socket { node_bind };
                allow generic_mon_$1_t generic_mon_$1_port_t:tcp_socket { name_connect };

')

########################################
## <summary>
##      Authorize to get some basic infos for monitoring tools (processes, fs info).
## </summary>
## <param name="domain subname">
##      <summary>
##      The domain to be authorized to connect to socket.
##      </summary>
## </param>
#
interface(`generic_mon_commom_access',`
        gen_require(`
                attribute non_security_file_type;

                type generic_mon_$1_t;
                type ld_so_cache_t;

                class file { execute };
                class process { execmem };
        ')

                files_read_non_security_files(generic_mon_$1_t)
                domain_read_all_domains_state(generic_mon_$1_t)

                allow generic_mon_$1_t ld_so_cache_t:file execute;

                fs_getattr_all_fs(generic_mon_$1_t)
                fs_getattr_all_dirs(generic_mon_$1_t)

                allow generic_mon_$1_t self:process execmem;

                kernel_read_network_state(generic_mon_$1_t)
                kernel_read_software_raid_state(generic_mon_$1_t)

                files_exec_usr_files(generic_mon_$1_t)

                allow generic_mon_$1_t non_security_file_type:{dir file lnk_file sock_file fifo_file chr_file blk_file}  getattr;
')


########################################
## <summary>
##      Ensure pid files are labellized correctly.
## </summary>
## <param name="domain subname">
##      <summary>
##      The domain to be authorized.
##      </summary>
## </param>
#
interface(`generic_mon_pid_file_trans',`
        gen_require(`
                type generic_mon_$1_t;
                type generic_mon_$1_var_run_t;

                class file { manage_file_perms };
                class process { manage_dir_perms };
        ')
                # Be able to go to and search through /run or /var/run, ...
                files_search_pids(generic_mon_$1_t)
                # Make sure that, if generic_mon_$1_t writes a pid file, it gets the proper context
                files_pid_filetrans(generic_mon_$1_t, generic_mon_$1_var_run_t, file)
                # Be able to manage its own pid files and dirs
                allow generic_mon_$1_t generic_mon_$1_var_run_t:file manage_file_perms;
                allow generic_mon_$1_t generic_mon_$1_var_run_t:dir manage_dir_perms;
')


########################################
## <summary>
##      Run commands through sudo.
## </summary>
## <param name="domain subname">
##      <summary>
##      The domain to be authorized to sudo.
##      </summary>
## </param>
#
interface(`generic_mon_sudo_exec',`
        gen_require(`
                type generic_mon_$1_t;
                type chkpwd_t;

                class process { noatsecure rlimitinh siginh };
        ')
                sudo_exec(generic_mon_$1_t)
                #Execute chkpwd in the target domain
                auth_domtrans_chk_passwd(generic_mon_$1_t)
                allow generic_mon_$1_t chkpwd_t:process { noatsecure rlimitinh siginh };
')


########################################
## <summary>
##      Read and send kernel messages.
## </summary>
## <param name="domain subname">
##      <summary>
##      The domain to be authorized to sudo.
##      </summary>
## </param>
#
interface(`generic_mon_kernel_message',`
        gen_require(`
                type generic_mon_$1_t;
                type kernel_t;

                class system { syslog_read };
                class unix_dgram_socket { sendto };
        ')
                dev_read_kmsg(generic_mon_$1_t)
                allow generic_mon_$1_t kernel_t:system syslog_read;
                allow generic_mon_$1_t kernel_t:unix_dgram_socket sendto;
')


########################################
## <summary>
##      Manage tmp files and ensure they are labellized correctly.
## </summary>
## <param name="domain subname">
##      <summary>
##      The domain to be authorized.
##      </summary>
## </param>
#
interface(`generic_mon_manage_tmp_files',`
        gen_require(`
                type generic_mon_$1_t;
        ')

                #Write files to tmp dirs
                files_tmp_filetrans(generic_mon_$1_t, generic_mon_$1_tmp_t, file)
                #Ensure tmp files will have the good contect
                files_manage_generic_tmp_files(generic_mon_$1_t)

')


########################################
## <summary>
##      Allow to run dmesg command.
## </summary>
## <param name="domain subname">
##      <summary>
##      The domain to be authorized.
##      </summary>
## </param>
#
interface(`generic_mon_dmesg',`
        gen_require(`
                type generic_mon_$1_t;
                type dmesg_exec_t;
                class file { execute execute_no_trans };
        ')

        allow generic_mon_$1_t dmesg_exec_t:file { execute execute_no_trans };

')


########################################
## <summary>
##      Allow to run systat commands.
## </summary>
## <param name="domain subname">
##      <summary>
##      The domain to be authorized.
##      </summary>
## </param>
#
interface(`generic_mon_systat',`
        gen_require(`
                type generic_mon_$1_t;
                type sysstat_exec_t;
                class file { execute execute_no_trans };
        ')

        allow generic_mon_$1_t sysstat_exec_t:file { execute execute_no_trans };

')


########################################
## <summary>
##      Allow to write to devlog sock file.
## </summary>
## <param name="domain subname">
##      <summary>
##      The domain to be authorized.
##      </summary>
## </param>
#
interface(`generic_mon_write_devlog',`
        gen_require(`
                type generic_mon_$1_t;
                type devlog_t;
                class sock_file { write };
        ')

        allow generic_mon_$1_t devlog_t:sock_file write;

')

########################################
## <summary>
##      Allow to check service / unit status.
## </summary>
## <param name="domain subname">
##      <summary>
##      The domain to be authorized.
##      </summary>
## </param>
#
interface(`generic_mon_service_status',`
        gen_require(`
                type generic_mon_$1_t;
                type systemd_unit_file_t;
                class service { status };
                attribute systemd_unit_file_type;
        ')

        dbus_send_system_bus(generic_mon_$1_t);
        init_dbus_chat(generic_mon_$1_t);
        dbus_system_bus_client(generic_mon_$1_t);
        allow generic_mon_$1_t systemd_unit_file_type:service status;

')

########################################
## <summary>
##      Allow to read auditd log directories.
## </summary>
## <param name="domain subname">
##      <summary>
##      The domain to be authorized.
##      </summary>
## </param>
#
interface(`generic_mon_read_dir_auditd_log',`
        gen_require(`
                type generic_mon_$1_t;
                type auditd_log_t;
                class dir { getattr open read };
        ')

        allow generic_mon_$1_t auditd_log_t:dir { getattr open read };

')

########################################
## <summary>
##      Allow to bind on monitoring port
## </summary>
## <param name="domain subname">
##      <summary>
##      The domain to be authorized.
##      </summary>
## </param>
#
interface(`generic_mon_monitoring_metrics',`
        gen_require(`
                type generic_mon_$1_t;
                attribute metrics_monitor_port;
        ')

        typeattribute generic_mon_$1_t metrics_monitor_port;

')
